<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE mapper PUBLIC '-//mybatis.org//DTD Mapper 3.0//EN'
  'http://mybatis.org/dtd/mybatis-3-mapper.dtd'>


<mapper namespace='edu.columbia.gskr.sentimentmap.mybatis.mapper.TweetMapper'>

    <resultMap id="HashTagResult" type="String">
        <result column="hashTag" javaType="String"/>
    </resultMap>

    <resultMap type="TweetSentiment" id="TweetResult">

        <id property="id" column="id"/>
        <result property="userScreenName" column="userScreenName"/>
        <result property="userLocation" column="userLocation"/>
        <result property="profileImageURL" column="profileImageURL"/>
        <result property="statusText" column="statusText"/>
        <result property="latitude" column="latitude"/>
        <result property="longitude" column="longitude"/>
        <result property="createdDate" column="createdDate"/>
        <result property="updatedDate" column="updatedDate"/>
        <result property="language" column="language"/>
        <result property="isMixed" column="isMixed"/>
        <result property="score" column="score"/>
        <result property="type" column="type"/>
        <collection property="hashTags" resultMap='HashTagResult'/>

    </resultMap>


    <select id="getTweetById" parameterType="long" resultMap="TweetResult">
        select t1.id, t1.userScreenName, t1.userLocation, t1.profileImageURL, t1.statusText, t1.latitude, t1.longitude, t1.createdDate, t1.updatedDate, t2.hashTag, t3.language, t3.isMixed, t3.score, t3.type
        from
        (
        select id, userScreenName, userLocation, profileImageURL, statusText, latitude, longitude, createdDate, updatedDate
        from Tweets where id = #{id}
        ) as t1
        left join HashTags as t2 on t1.id = t2.tweetId
        left join Sentiments as t3 on t1.id = t3.tweetId
        where t3.type is not null;
    </select>

    <select id="getAllTweets" resultMap="TweetResult">
        select t1.id, t1.userScreenName, t1.userLocation, t1.profileImageURL, t1.statusText, t1.latitude, t1.longitude, t1.createdDate, t1.updatedDate, t2.hashTag, t3.language, t3.isMixed, t3.score, t3.type
        from
        (
        select id, userScreenName, userLocation, profileImageURL, statusText, latitude, longitude, createdDate, updatedDate
        from Tweets
        ) as t1
        left join HashTags as t2 on t1.id = t2.tweetId
        left join Sentiments as t3 on t1.id = t3.tweetId
        where t3.type is not null;
    </select>

    <select id="getTweetsLimit" parameterType="int" resultMap="TweetResult">
        select t1.id, t1.userScreenName, t1.userLocation, t1.profileImageURL, t1.statusText, t1.latitude, t1.longitude, t1.createdDate, t1.updatedDate, t2.hashTag, t3.language, t3.isMixed, t3.score, t3.type
        from
        (
        select id, userScreenName, userLocation, profileImageURL, statusText, latitude, longitude, createdDate, updatedDate
        from Tweets
        LIMIT #{limit}
        ) as t1
        left join HashTags as t2 on t1.id = t2.tweetId
        left join Sentiments as t3 on t1.id = t3.tweetId
        where t3.type is not null;
    </select>

    <select id="getTweetsByHashTag" parameterType="collection" resultMap="TweetResult">
        select t1.id, t1.userScreenName, t1.userLocation, t1.profileImageURL, t1.statusText, t1.latitude, t1.longitude, t1.createdDate, t1.updatedDate, t2.hashTag, t3.language, t3.isMixed, t3.score, t3.type
        from
        (
        select id, userScreenName, userLocation, profileImageURL, statusText, latitude, longitude, createdDate, updatedDate
        from Tweets
        ) as t1
        left join HashTags as t2 on t1.id = t2.tweetId
        left join Sentiments as t3 on t1.id = t3.tweetId
        where t1.id in (
        select distinct a.id from Tweets as a left join HashTags as b on a.id = b.tweetId
        where b.hashTag in
        <foreach item="item" index="index" collection="hashTags" open="(" separator="," close=")">
            #{item}
        </foreach>
        ) and t3.type is not null;
    </select>

    <select id="getAllHashTags" resultMap="HashTagResult">
        select t1.hashTag as hashTag
        from
        (
        select hashTag, count(hashTag) as cnt
        from HashTags
        group by hashTag
        ) as t1
        order by t1.cnt desc
    </select>

    <select id="getHashTagsLimit" parameterType="int" resultMap="HashTagResult">
        select t1.hashTag as hashTag
        from
        (
        select hashTag, count(hashTag) as cnt
        from HashTags
        group by hashTag
        ) as t1
        order by t1.cnt desc
        LIMIT #{limit}
    </select>

    <select id="getTweetCount" resultType="int">

        SELECT COUNT(*) as count
        from Tweets as t1, Sentiments as t2
        where t1.id = t2.tweetId;

    </select>

</mapper>
